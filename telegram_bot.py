# telegram_bot.py (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å AD)
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from auth.ad_auth import authenticate_user
from auth.session import create_session, get_session, increment_login_attempts, is_user_locked
from dotenv import load_dotenv
import requests
import os

load_dotenv()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
LOGIN, PASSWORD = range(2)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_URL = os.getenv("API_URL", "http://localhost:8000/query")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if is_user_locked(user_id):
        await update.message.reply_text(
            "‚ùå –í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏–∑-–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞.\n"
            "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç."
        )
        return ConversationHandler.END

    await update.message.reply_text(
        "üîê –ü—Ä–∏–≤–µ—Ç! –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, ivanov):"
    )
    return LOGIN


async def ask_login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.message.text.strip()
    if not username:
        await update.message.reply_text("–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
        return LOGIN

    context.user_data['username'] = username
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    return PASSWORD


async def ask_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = context.user_data.get('username')
    password = update.message.text

    if is_user_locked(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 20 –º–∏–Ω—É—Ç.")
        return ConversationHandler.END

    success, message = authenticate_user(username, password)

    if success:
        session_id = create_session(user_id, username, message)
        context.user_data['session_id'] = session_id
        await update.message.reply_text(
            f"‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message}!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."
        )
        return ConversationHandler.END
    else:
        attempts = increment_login_attempts(user_id)
        remaining = MAX_LOGIN_ATTEMPTS - attempts

        if remaining > 0:
            await update.message.reply_text(
                f"‚ùå {message}\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining}\n"
                "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:"
            )
            return PASSWORD
        else:
            await update.message.reply_text(
                "üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.\n"
                "–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 20 –º–∏–Ω—É—Ç."
            )
            return ConversationHandler.END


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session_id = context.user_data.get('session_id')
    if not session_id or not get_session(session_id):
        await update.message.reply_text("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞.")
        return

    user_text = update.message.text.strip()
    if not user_text:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å.")
        return

    try:
        response = requests.post(API_URL, json={"question": user_text}, timeout=30)
        if response.status_code != 200:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç–≤–µ—Ç–∞.")
            return

        data = response.json()
        answer = data.get("answer", "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await update.message.reply_text(f"üîç {answer}")

        images = data.get("images", [])
        if images:
            await update.message.reply_text("üìé –í–æ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞:")

            for img in images:
                img_path = img.get("img_path")
                caption = img.get("caption", "–°–∫—Ä–∏–Ω—à–æ—Ç")

                if os.path.exists(img_path):
                    with open(img_path, 'rb') as photo:
                        try:
                            await context.bot.send_photo(
                                chat_id=update.effective_chat.id,
                                photo=photo,
                                caption=f"üñºÔ∏è {caption}"
                            )
                        except Exception as e:
                            await update.message.reply_text(f"üì∑ {caption} (–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å)")
                else:
                    await update.message.reply_text(f"üì∑ {caption}")

    except requests.exceptions.Timeout:
        await update.message.reply_text("‚è≥ –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∏–π. –£—Ç–æ—á–Ω–∏—Ç–µ –≤–æ–ø—Ä–æ—Å.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")


def main():
    if not BOT_TOKEN:
        print("‚ùó –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env")
        return

    app = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LOGIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_login)],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_password)],
        },
        fallbacks=[CommandHandler("start", start)]
    )

    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("‚úÖ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
    app.run_polling()


if __name__ == "__main__":
    main()