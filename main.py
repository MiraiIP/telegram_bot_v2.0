# main.py
import asyncio
import threading
import uvicorn
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from rag.document_loader import load_documents_from_folder
from rag.rag_engine import query_rag
from auth.ad_auth import authenticate_user
from auth.session import create_session, get_session, increment_login_attempts, is_user_locked
from dotenv import load_dotenv
import os
import json
import re

load_dotenv()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_HOST = os.getenv("API_HOST", "127.0.0.1")
API_PORT = int(os.getenv("API_PORT", 8000))

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
LOGIN, PASSWORD = range(2)

# === FastAPI ===
fastapi_app = FastAPI()


class QueryRequest(BaseModel):
    question: str


@fastapi_app.post("/query")
def api_query(request: QueryRequest):
    result = query_rag(request.question)
    return result


def run_fastapi():
    uvicorn.run(fastapi_app, host=API_HOST, port=API_PORT)


# === Telegram Bot ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üîê –í–æ–π—Ç–∏", callback_data="login")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞!", reply_markup=reply_markup
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "login":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
        context.user_data["awaiting"] = "login"
    elif query.data == "help":
        await query.edit_message_text(
            "–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n"
            "–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ, –∑–∞—Ç–µ–º –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã."
        )


async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if is_user_locked(user_id):
        await update.message.reply_text("‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ 20 –º–∏–Ω—É—Ç.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if context.user_data.get("awaiting") == "login":
        username = text
        if not username:
            await update.message.reply_text("–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
            return
        
        context.user_data["username"] = username
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        context.user_data["awaiting"] = "password"
        return

    if context.user_data.get("awaiting") == "password":
        username = context.user_data["username"]
        password = text
        if not password:
            await update.message.reply_text("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
            return
            
        success, full_name = authenticate_user(username, password)

        if success:
            session_id = create_session(user_id, username, full_name)
            context.user_data["session_id"] = session_id
            context.user_data["awaiting"] = None
            await update.message.reply_text(f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!")
        else:
            attempts = increment_login_attempts(user_id)
            if attempts >= 3:
                await update.message.reply_text(
                    "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 20 –º–∏–Ω—É—Ç."
                )
            else:
                remaining = 3 - attempts
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining}"
                )
        return

    # –û–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    session_id = context.user_data.get("session_id")
    if not session_id or not get_session(session_id):
        keyboard = [[InlineKeyboardButton("üîê –í–æ–π—Ç–∏", callback_data="login")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=reply_markup
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    try:
        result = query_rag(text)
        
        answer = result.get("answer", "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        source = result.get("source")
        images = result.get("images", [])
        link_to_document = result.get("link_to_document")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        response_text = f"üîç {answer}"
        
        if source:
            response_text += f"\n\nüìå –ò—Å—Ç–æ—á–Ω–∏–∫: {source}"
            
        if link_to_document:
            response_text += f"\n\nüìé –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {link_to_document}"

        await update.message.reply_text(response_text)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
        if images:
            await update.message.reply_text("üì∑ –í–æ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
            for img in images:
                img_path = img.get("img_path")
                caption = img.get("caption", "–°–∫—Ä–∏–Ω—à–æ—Ç")

                if img_path and os.path.exists(img_path):
                    try:
                        with open(img_path, "rb") as photo:
                            await context.bot.send_photo(
                                chat_id=update.effective_chat.id,
                                photo=photo,
                                caption=caption
                            )
                    except Exception as e:
                        await update.message.reply_text(f"üì∑ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {caption}")
                else:
                    await update.message.reply_text(f"üì∑ {caption} (—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω)")
                    
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")


def run_telegram():
    if not BOT_TOKEN:
        print("‚ùó –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env")
        return
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    app.add_handler(CallbackQueryHandler(button_handler))
    print("‚úÖ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    app.run_polling()


# === Watcher ===
class WatcherHandler(FileSystemEventHandler):
    def on_modified(self, event):
        if event.is_directory or not event.src_path.lower().endswith((".pdf", ".docx")):
            return
        print(f"üîÑ –ò–∑–º–µ–Ω—ë–Ω: {event.src_path}")
        load_documents_from_folder()

    def on_created(self, event):
        if event.is_directory or not event.src_path.lower().endswith((".pdf", ".docx")):
            return
        print(f"üÜï –î–æ–±–∞–≤–ª–µ–Ω: {event.src_path}")
        load_documents_from_folder()


def run_watcher():
    load_documents_from_folder()
    event_handler = WatcherHandler()
    observer = Observer()
    observer.schedule(event_handler, "documents", recursive=False)
    observer.start()
    try:
        while True:
            asyncio.run(asyncio.sleep(1))
    except KeyboardInterrupt:
        observer.stop()
    observer.join()


# === –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ ===
if __name__ == "__main__":
    threading.Thread(target=run_fastapi, daemon=True).start()
    threading.Thread(target=run_watcher, daemon=True).start()
    run_telegram()